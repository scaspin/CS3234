{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 :- use_module(library(lists)).\
opposite(I):- -I.\
\
\
%empty\
dp([]):- true, !.\
dp([[]]):- !, false.\
\
\
%generate and call outside loop\
dp(L):- find_literal(L, Literals), positive_literal_loop(L, Literals).\
\
find_literal(Phi, List):- append(Phi, Temp), sort(Temp, List).\
\
%outside loop- general outline of algorithm\
positive_literal_loop(_, []).\
\
%if I is not(something), call on tail, otherwise perform rest of algorithm\
positive_literal_loop(Phi, [I|Tail]):- ((I=opposite(_), positive_literal_loop(Phi, Tail)) ; (foreach_pair(I, Phi, New),!, remove_I(I, New, [] , New2), remove_I(opposite(I), New2, [], New3), !, check_empty(New3), positive_literal_loop(New3, Tail))).\
\
%finding and working on pairs of I within "Phi"\
foreach_pair(I, Phi, New):- find_pairs(I, Phi, Pairs), add_resolvent(I, Phi, New, Pairs).\
\
%%%%%%%%%%%%%%%%%%%%%%%\
%find pairs by finding all instances of positive, all instances of negative, and then create pair from each\
%%%%%%%%%%%%%%%%%%%%%%%\
\
find_pairs(I, Phi, Pairs):- find_terms(I, Phi,[], L1), find_terms(opposite(I), Phi,[], L2), pair(L1, L2, Pairs).\
\
find_terms(_, [], L1 , L2):- L1=L2.\
find_terms(I, [Head|Tail], L1, L3):- member(I, Head) , append(L1, Head, L2), find_terms(I, Tail, L2, L3) ; find_terms(I, Tail, L1, L3). \
\
pair(L1, L2, Pairs):-findall(\{A,B\}, (member(A, L1), member(B, L2)), Pairs).\
\
%%%%%%%%%%%%%%%%%%%%%%\
%resolving pairs and adding resolvent to "New" list from Phi\
%%%%%%%%%%%%%%%%%%%%%%\
add_resolvent(_, Phi, New, []):- Phi = New.\
add_resolvent(I, Phi, New2, [Head|Tail]):- make_resolvent(I, Head, R), append(Phi, R, New), add_resolvent(I, New, New2, Tail).\
\
make_resolvent(I, \{C1, C2\}, R):- (C2=opposite(C1), R=[]); (append(C1, C2, Temp), sort(Temp, Temp1), subtract(Temp1, I, R), !).\
\
%%%%%%%%%%%%%%%%%%%%%%%\
%Remove all clauses containing I\
%%%%%%%%%%%%%%%%%%%%%%%o\
remove_I(_, [], OldNew, FinalNew):- FinalNew = [OldNew].\
remove_I(I, Clauses, OldNew, FinalNew):- Clauses=[Head|Tail], ((member(I, Head), remove_I(I, Tail, OldNew, FinalNew)); append(OldNew, Head, Temp), remove_I(I, Tail, Temp, FinalNew)).\
\
%%%%%%%%%%%%%%%%%%%%%%%\
%Return false if empty clause is found\
%%%%%%%%%%%%%%%%%%%%%%%\
check_empty([[_]]):-!, true.\
check_empty([[]]):-!, false.\
check_empty([Head|Tail]):- (Head=[], !, false); check_empty(Tail).\
\
}